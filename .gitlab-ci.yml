image: docker:stable
services:
  - docker:dind

# image: gitlab.stfalcon.com:4567/stfalcon/fwdays/fwdays-dev:v1.2
# cache:
    # paths:
    #     - vendor/
    #     - node_modules/

# services:
#   - name: jekakm/mysql-core:201902201
#     alias: fwdays-php73-mysql

#   - name: gitlab.stfalcon.com:4567/stfalcon/fwdays/minio-mc:v1.0
  
#   - name: minio/minio:latest
#     alias: minio

# variables:
#   MYSQL_ROOT_PASSWORD: qwerty
#   MINIO_ACCESS_KEY: minio
#   MINIO_SECRET_KEY: qwe12345


# .before_script_template: &build_ci
#     before_script:
#         - sudo cp app/config/parameters.yml.stag app/config/parameters.yml
#         - sudo unxz geodata/GeoLiteCity.dat.xz
#         - sudo composer.phar install --optimize-autoloader
#         - sudo npm install

stages:
    - 'dind'
    - 'SonarQube'
    - 'Build'
    - 'Deploy to staging'
    - 'Deploy to production'


functional-test:
    tags:
        - heavy
    stage: 'dind'
    before_script:
        - docker info
        - docker-compose --version
    script:
        - docker-compose up -d

# # CI jobs
# composer checks:
#     stage: 'CI jobs'
#     <<: *build_ci
#     script:
#         - sudo composer.phar ci:composer-validate

# security checks:
#     stage: 'CI jobs'
#     <<: *build_ci
#     script:
#         - sudo composer.phar ci:security-check

# doctrine checks:
#     stage: 'CI jobs'
#     <<: *build_ci
#     script:
#         - sudo composer.phar ci:doctrine-schema-validate

# twig checks:
#     stage: 'CI jobs'
#     <<: *build_ci
#     script:
#         - sudo composer.phar ci:twig-lint

# yaml checks:
#     stage: 'CI jobs'
#     <<: *build_ci
#     script:
#         - sudo composer.phar ci:yaml-lint

# code style checks:
#     stage: 'CI jobs'
#     <<: *build_ci
#     script:
#         - sudo composer.phar ci:code-style

# static analysis:
#     stage: 'CI jobs'
#     <<: *build_ci
#     script:
#         - sudo composer.phar ci:static-analysis

# codeception:
#     stage: 'CI jobs'
#     <<: *build_ci
#     script:
#         - sudo composer.phar ci:codeception-acceptance

sonar-scanner:
    stage: 'SonarQube'
    image: gitlab.stfalcon.com:4567/stfalcon/fwdays/fwdays-sonar-scanner:v1.0
    only:
        # - master
        - add-codception
    # <<: *build_ci
    script:
        # - sudo sonar-scanner -Dsonar.projectKey=$CI_PROJECT_NAME -Dsonar.sources=. -Dsonar.host.url=https://sonar.stfalcon.com -Dsonar.login=$SONAR_TOKEN
        - echo test
        
build image:
    stage: 'Build'
    image: docker:stable
    only:
        - master
        - stag
    tags:
        - k8s-deploy
    script:
        - cp docker-configs/fwdays-prod/deploy/Dockerfile ./
        - docker login -u $CI_DEPLOY_USER -p $CI_DEPLOY_PASSWORD $CI_REGISTRY
        - docker login -u $DOCKERHUB_LOGIN -p $DOCKERHUB_PASSWORD
        - docker build -t fwdays-deployment .
        - docker tag fwdays-deployment:latest jekakm/fwdays-deployment:$CI_COMMIT_SHORT_SHA
        - docker push jekakm/fwdays-deployment:$CI_COMMIT_SHORT_SHA
        
staging deploy:
    stage: 'Deploy to staging'
    only:
        - stag
    image: docker:stable
    tags:
        - k8s-deploy
    script:
        - wget https://storage.googleapis.com/kubernetes-release/release/v1.13.4/bin/linux/amd64/kubectl -O /usr/local/bin/kubectl
        - chmod a+x /usr/local/bin/kubectl
        - 'mkdir /root/.kube && wget --header="Content-Type: application/json" --header="Authorization: Bearer $DO_TOKEN" "https://api.digitalocean.com/v2/kubernetes/clusters/$CLUSTER_ID/kubeconfig" -O /root/.kube/config'
        - kubectl -n fwdays-stag set image deployments/fwdays-backend fwdays-backend=jekakm/fwdays-deployment:$CI_COMMIT_SHORT_SHA
        - kubectl rollout status deployment/fwdays-backend -n fwdays-stag
        - POD=`kubectl get pods -l app=fwdays-backend -n fwdays-stag|grep "^fwdays-backend.*Running"|awk '{print $1}'|head -n1` || true
        - kubectl -n fwdays-stag exec -it $POD -- bash -c 'su www-data -c  "php bin/console doctrine:migrations:migrate --no-interaction --env=prod"'
        - sed -i s/%job-image-name%/jekakm\\/fwdays-deployment:$CI_COMMIT_SHORT_SHA/ docker-configs/k8s/stag/cron/*
        - kubectl apply -f docker-configs/k8s/stag/cron/
    environment:
        name: staging
        url: https://fwdays-stag.k8s.stfalcon.com

staging rollback:
    stage: 'Deploy to staging'
    only:
        - stag
    image: docker:stable
    tags:
        - k8s-deploy
    script:
        - wget https://storage.googleapis.com/kubernetes-release/release/v1.13.4/bin/linux/amd64/kubectl -O /usr/local/bin/kubectl
        - chmod a+x /usr/local/bin/kubectl
        - 'mkdir /root/.kube && wget --header="Content-Type: application/json" --header="Authorization: Bearer $DO_TOKEN" "https://api.digitalocean.com/v2/kubernetes/clusters/$CLUSTER_ID/kubeconfig" -O /root/.kube/config'
        - kubectl -n fwdays-stag rollout undo deployments/fwdays-backend
        - DEPLOYMENT_HASH=`kubectl -n fwdays-stag get deployment fwdays-backend -o=jsonpath='{$.spec.template.spec.containers[:1].image}'|cut -d ':' -f2`
        - sed -i s/%job-image-name%/jekakm\\/fwdays-deployment:$DEPLOYMENT_HASH/ docker-configs/k8s/stag/cron/*
        - kubectl apply -f docker-configs/k8s/stag/cron/
    environment:
        name: staging
        url: https://fwdays-stag.k8s.stfalcon.com
    when: manual

production deploy:
    stage: 'Deploy to production'
    only:
        - master
    image: docker:stable
    tags:
        - k8s-deploy
    script:
        - wget https://storage.googleapis.com/kubernetes-release/release/v1.13.4/bin/linux/amd64/kubectl -O /usr/local/bin/kubectl
        - chmod a+x /usr/local/bin/kubectl
        - 'mkdir /root/.kube && wget --header="Content-Type: application/json" --header="Authorization: Bearer $DO_TOKEN" "https://api.digitalocean.com/v2/kubernetes/clusters/$CLUSTER_ID/kubeconfig" -O /root/.kube/config'
        - kubectl -n fwdays-prod set image deployments/fwdays-backend fwdays-backend=jekakm/fwdays-deployment:$CI_COMMIT_SHORT_SHA
        - kubectl rollout status deployment/fwdays-backend -n fwdays-prod
        - POD=`kubectl get pods -l app=fwdays-backend -n fwdays-prod|grep "^fwdays-backend.*Running"|awk '{print $1}'|head -n1` || true
        - kubectl -n fwdays-prod exec -it $POD -- bash -c 'su www-data -c  "php bin/console doctrine:migrations:migrate --no-interaction --env=prod"'
        - sed -i s/%job-image-name%/jekakm\\/fwdays-deployment:$CI_COMMIT_SHORT_SHA/ docker-configs/k8s/prod/cron/*
        - kubectl apply -f docker-configs/k8s/prod/cron/
        - wget https://downloads.sentry-cdn.com/sentry-cli/1.48.0/sentry-cli-Linux-x86_64 -O /usr/local/bin/sentry-cli
        - chmod a+x /usr/local/bin/sentry-cli
        - VERSION=$(sentry-cli releases propose-version)
        - sentry-cli releases new -p fwdays $VERSION
        - sentry-cli releases set-commits --auto $VERSION
        - sentry-cli releases deploys $VERSION new -e prod
    environment:
        name: production
        url: https://fwdays.com
    when: manual

production rollback:
    stage: 'Deploy to production'
    only:
        - master
    image: docker:stable
    tags:
        - k8s-deploy
    script:
        - wget https://storage.googleapis.com/kubernetes-release/release/v1.13.4/bin/linux/amd64/kubectl -O /usr/local/bin/kubectl
        - chmod a+x /usr/local/bin/kubectl
        - 'mkdir /root/.kube && wget --header="Content-Type: application/json" --header="Authorization: Bearer $DO_TOKEN" "https://api.digitalocean.com/v2/kubernetes/clusters/$CLUSTER_ID/kubeconfig" -O /root/.kube/config'
        - kubectl -n fwdays-prod rollout undo deployments/fwdays-backend
        - DEPLOYMENT_HASH=`kubectl -n fwdays-stag get deployment fwdays-backend -o=jsonpath='{$.spec.template.spec.containers[:1].image}'|cut -d ':' -f2`
        - sed -i s/%job-image-name%/jekakm\\/fwdays-deployment:$DEPLOYMENT_HASH/ docker-configs/k8s/stag/cron/*
        - kubectl apply -f docker-configs/k8s/prod/cron/
    environment:
        name: production
        url: https://fwdays.com
    when: manual